}
plot(y=0,x=0,col = "black",lwd=2,ylab="",xlab="",ylim =c(0,6000),xlim=c(0,120))
title(xlab="Time day",ylab=expression(Biomass~kg/m^2),line=2)
for (i in c(1:10)){
lines(c(unlist(df_logistic[i])), type="l",col = "black",lwd=2)
}
df_irradiance <- data.frame(matrix(nrow = end.time, ncol = 0))
df_irradiance_derivative <- data.frame(matrix(nrow = end.time, ncol = 0))
for (i in c(1:10)){
simulated_irradiance_data <- c(NA)
while(sum(is.na(simulated_irradiance_data)) !=0|| (tail(simulated_irradiance_data, n=1)<(Mmax*1000-2000))){
r <- rnorm(1,0.25,0.25)
a <- runif(1,-0.5,0.5)
fi <- runif(1,1/365,182/365)
d_irradiance <- expression((r+(a*sin((2*pi/365)*t+fi))) * x * (1 - x/Mmax))
sde.sim(X0=y0, delta=1, N=(end.time-1), drift=d_irradiance, sigma=s, M = 1)*1000 -> simulated_irradiance_data
sp <-smooth.spline(y=simulated_irradiance_data,x=time.vec,all.knots = TRUE)
derivative_irradiance <- predict(sp, x=time.vec, deriv = 1,)$y
}
df_irradiance[ , ncol(df_irradiance) + 1] = simulated_irradiance_data
df_irradiance_derivative[ , ncol(df_irradiance_derivative) + 1] = derivative_irradiance
}
plot(y=0,x=0, type="l",col = "black",lwd=2,ylim =c(0,1000),xlim=c(0,6000),xlab="",ylab="")
title(xlab=expression(Biomass~kg/m^2),ylab=expression(Derivatives~kg/(m^2~day)),line=2.5)
for (i in c(1:10)){
lines(y=c(unlist(df_irradiance_derivative[i])),x=c(unlist(df_irradiance[i])), type="l",col = "red",lwd=2,ylim =c(0,600),xlab=expression(Biomass~kg/m^2),ylab="Derivative")
}
plot(y=0,x=0,col = "black",lwd=2,ylab="",xlab="",ylim =c(0,6000),xlim=c(0,120))
title(xlab="Time day",ylab=expression(Biomass~kg/m^2),line=2)
for (i in c(1:10)){
lines(c(unlist(df_irradiance[i])), type="l",col = "red",lwd=2,ylim =c(0,1000))
}
df_irradiance <- data.frame(matrix(nrow = end.time, ncol = 0))
df_irradiance_derivative <- data.frame(matrix(nrow = end.time, ncol = 0))
for (i in c(1:10)){
simulated_irradiance_data <- c(NA)
while(sum(is.na(simulated_irradiance_data)) !=0|| (tail(simulated_irradiance_data, n=1)<(Mmax*1000-2000))){
r <- rnorm(1,0.25,0.25)
a <- runif(1,-0.5,0.5)
fi <- runif(1,1/365,182/365)
d_irradiance <- expression((r+(a*sin((2*pi/365)*t+fi))) * x * (1 - x/Mmax))
sde.sim(X0=y0, delta=1, N=(end.time-1), drift=d_irradiance, sigma=s, M = 1)*1000 -> simulated_irradiance_data
sp <-smooth.spline(y=simulated_irradiance_data,x=time.vec,all.knots = TRUE)
derivative_irradiance <- predict(sp, x=time.vec, deriv = 1,)$y
}
df_irradiance[ , ncol(df_irradiance) + 1] = simulated_irradiance_data
df_irradiance_derivative[ , ncol(df_irradiance_derivative) + 1] = derivative_irradiance
}
plot(y=0,x=0, type="l",col = "black",lwd=2,ylim =c(0,1000),xlim=c(0,6000),xlab="",ylab="")
title(xlab=expression(Biomass~kg/m^2),ylab=expression(Derivatives~kg/(m^2~day)),line=2.5)
for (i in c(1:10)){
lines(y=c(unlist(df_irradiance_derivative[i])),x=c(unlist(df_irradiance[i])), type="l",col = "red",lwd=2,ylim =c(0,600),xlab=expression(Biomass~kg/m^2),ylab="Derivative")
}
plot(y=0,x=0,col = "black",lwd=2,ylab="",xlab="",ylim =c(0,6000),xlim=c(0,120))
title(xlab="Time day",ylab=expression(Biomass~kg/m^2),line=2)
for (i in c(1:10)){
lines(c(unlist(df_irradiance[i])), type="l",col = "red",lwd=2,ylim =c(0,1000))
}
df_irradiance <- data.frame(matrix(nrow = end.time, ncol = 0))
df_irradiance_derivative <- data.frame(matrix(nrow = end.time, ncol = 0))
for (i in c(1:10)){
simulated_irradiance_data <- c(NA)
while(sum(is.na(simulated_irradiance_data)) !=0|| (tail(simulated_irradiance_data, n=1)<(Mmax*1000-2000))){
r <- rnorm(1,0.25,0.25)
a <- runif(1,-0.5,0.5)
fi <- runif(1,1/365,182/365)
d_irradiance <- expression((r+(a*sin((2*pi/365)*t+fi))) * x * (1 - x/Mmax))
sde.sim(X0=y0, delta=1, N=(end.time-1), drift=d_irradiance, sigma=s, M = 1)*1000 -> simulated_irradiance_data
sp <-smooth.spline(y=simulated_irradiance_data,x=time.vec,all.knots = TRUE)
derivative_irradiance <- predict(sp, x=time.vec, deriv = 1,)$y
}
df_irradiance[ , ncol(df_irradiance) + 1] = simulated_irradiance_data
df_irradiance_derivative[ , ncol(df_irradiance_derivative) + 1] = derivative_irradiance
}
plot(y=0,x=0, type="l",col = "black",lwd=2,ylim =c(0,1000),xlim=c(0,6000),xlab="",ylab="")
title(xlab=expression(Biomass~kg/m^2),ylab=expression(Derivatives~kg/(m^2~day)),line=2.5)
for (i in c(1:10)){
lines(y=c(unlist(df_irradiance_derivative[i])),x=c(unlist(df_irradiance[i])), type="l",col = "red",lwd=2,ylim =c(0,600),xlab=expression(Biomass~kg/m^2),ylab="Derivative")
}
plot(y=0,x=0,col = "black",lwd=2,ylab="",xlab="",ylim =c(0,6000),xlim=c(0,120))
title(xlab="Time day",ylab=expression(Biomass~kg/m^2),line=2)
for (i in c(1:10)){
lines(c(unlist(df_irradiance[i])), type="l",col = "red",lwd=2,ylim =c(0,1000))
}
df_irradiance <- data.frame(matrix(nrow = end.time, ncol = 0))
df_irradiance_derivative <- data.frame(matrix(nrow = end.time, ncol = 0))
for (i in c(1:10)){
simulated_irradiance_data <- c(NA)
while(sum(is.na(simulated_irradiance_data)) !=0|| (tail(simulated_irradiance_data, n=1)<(Mmax*1000-2000))){
r <- rnorm(1,0.25,0.25)
a <- runif(1,-0.5,0.5)
fi <- runif(1,1/365,182/365)
d_irradiance <- expression((r+(a*sin((2*pi/365)*t+fi))) * x * (1 - x/Mmax))
sde.sim(X0=y0, delta=1, N=(end.time-1), drift=d_irradiance, sigma=s, M = 1)*1000 -> simulated_irradiance_data
sp <-smooth.spline(y=simulated_irradiance_data,x=time.vec,all.knots = TRUE)
derivative_irradiance <- predict(sp, x=time.vec, deriv = 1,)$y
}
df_irradiance[ , ncol(df_irradiance) + 1] = simulated_irradiance_data
df_irradiance_derivative[ , ncol(df_irradiance_derivative) + 1] = derivative_irradiance
}
plot(y=0,x=0, type="l",col = "black",lwd=2,ylim =c(0,1000),xlim=c(0,6000),xlab="",ylab="")
title(xlab=expression(Biomass~kg/m^2),ylab=expression(Derivatives~kg/(m^2~day)),line=2.5)
for (i in c(1:10)){
lines(y=c(unlist(df_irradiance_derivative[i])),x=c(unlist(df_irradiance[i])), type="l",col = "red",lwd=2,ylim =c(0,600),xlab=expression(Biomass~kg/m^2),ylab="Derivative")
}
plot(y=0,x=0,col = "black",lwd=2,ylab="",xlab="",ylim =c(0,6000),xlim=c(0,120))
title(xlab="Time day",ylab=expression(Biomass~kg/m^2),line=2)
for (i in c(1:10)){
lines(c(unlist(df_irradiance[i])), type="l",col = "red",lwd=2,ylim =c(0,1000))
}
df_irradiance <- data.frame(matrix(nrow = end.time, ncol = 0))
df_irradiance_derivative <- data.frame(matrix(nrow = end.time, ncol = 0))
for (i in c(1:10)){
simulated_irradiance_data <- c(NA)
while(sum(is.na(simulated_irradiance_data)) !=0|| (tail(simulated_irradiance_data, n=1)<(Mmax*1000-2000))){
r <- rnorm(1,0.25,0.25)
a <- runif(1,-0.5,0.5)
fi <- runif(1,1/365,182/365)
d_irradiance <- expression((r+(a*sin((2*pi/365)*t+fi))) * x * (1 - x/Mmax))
sde.sim(X0=y0, delta=1, N=(end.time-1), drift=d_irradiance, sigma=s, M = 1)*1000 -> simulated_irradiance_data
sp <-smooth.spline(y=simulated_irradiance_data,x=time.vec,all.knots = TRUE)
derivative_irradiance <- predict(sp, x=time.vec, deriv = 1,)$y
}
df_irradiance[ , ncol(df_irradiance) + 1] = simulated_irradiance_data
df_irradiance_derivative[ , ncol(df_irradiance_derivative) + 1] = derivative_irradiance
}
plot(y=0,x=0, type="l",col = "black",lwd=2,ylim =c(0,1000),xlim=c(0,6000),xlab="",ylab="")
title(xlab=expression(Biomass~kg/m^2),ylab=expression(Derivatives~kg/(m^2~day)),line=2.5)
for (i in c(1:10)){
lines(y=c(unlist(df_irradiance_derivative[i])),x=c(unlist(df_irradiance[i])), type="l",col = "red",lwd=2,ylim =c(0,600),xlab=expression(Biomass~kg/m^2),ylab="Derivative")
}
plot(y=0,x=0,col = "black",lwd=2,ylab="",xlab="",ylim =c(0,6000),xlim=c(0,120))
title(xlab="Time day",ylab=expression(Biomass~kg/m^2),line=2)
for (i in c(1:10)){
lines(c(unlist(df_irradiance[i])), type="l",col = "red",lwd=2,ylim =c(0,1000))
}
df_irradiance <- data.frame(matrix(nrow = end.time, ncol = 0))
df_irradiance_derivative <- data.frame(matrix(nrow = end.time, ncol = 0))
for (i in c(1:10)){
simulated_irradiance_data <- c(NA)
while(sum(is.na(simulated_irradiance_data)) !=0|| (tail(simulated_irradiance_data, n=1)<(Mmax*1000-2000))){
r <- rnorm(1,0.25,0.25)
a <- runif(1,-0.5,0.5)
fi <- runif(1,1/365,182/365)
d_irradiance <- expression((r+(a*sin((2*pi/365)*t+fi))) * x * (1 - x/Mmax))
sde.sim(X0=y0, delta=1, N=(end.time-1), drift=d_irradiance, sigma=s, M = 1)*1000 -> simulated_irradiance_data
sp <-smooth.spline(y=simulated_irradiance_data,x=time.vec,all.knots = TRUE)
derivative_irradiance <- predict(sp, x=time.vec, deriv = 1,)$y
}
df_irradiance[ , ncol(df_irradiance) + 1] = simulated_irradiance_data
df_irradiance_derivative[ , ncol(df_irradiance_derivative) + 1] = derivative_irradiance
}
plot(y=0,x=0, type="l",col = "black",lwd=2,ylim =c(0,1000),xlim=c(0,6000),xlab="",ylab="")
title(xlab=expression(Biomass~kg/m^2),ylab=expression(Derivatives~kg/(m^2~day)),line=2.5)
for (i in c(1:10)){
lines(y=c(unlist(df_irradiance_derivative[i])),x=c(unlist(df_irradiance[i])), type="l",col = "red",lwd=2,ylim =c(0,600),xlab=expression(Biomass~kg/m^2),ylab="Derivative")
}
plot(y=0,x=0,col = "black",lwd=2,ylab="",xlab="",ylim =c(0,6000),xlim=c(0,120))
title(xlab="Time day",ylab=expression(Biomass~kg/m^2),line=2)
for (i in c(1:10)){
lines(c(unlist(df_irradiance[i])), type="l",col = "red",lwd=2,ylim =c(0,1000))
}
df_irradiance <- data.frame(matrix(nrow = end.time, ncol = 0))
df_irradiance_derivative <- data.frame(matrix(nrow = end.time, ncol = 0))
for (i in c(1:10)){
simulated_irradiance_data <- c(NA)
while(sum(is.na(simulated_irradiance_data)) !=0|| (tail(simulated_irradiance_data, n=1)<(Mmax*1000-2000))){
r <- rnorm(1,0.25,0.25)
a <- runif(1,-0.5,0.5)
fi <- runif(1,1/365,182/365)
d_irradiance <- expression((r+(a*sin((2*pi/365)*t+fi))) * x * (1 - x/Mmax))
sde.sim(X0=y0, delta=1, N=(end.time-1), drift=d_irradiance, sigma=s, M = 1)*1000 -> simulated_irradiance_data
sp <-smooth.spline(y=simulated_irradiance_data,x=time.vec,all.knots = TRUE)
derivative_irradiance <- predict(sp, x=time.vec, deriv = 1,)$y
}
df_irradiance[ , ncol(df_irradiance) + 1] = simulated_irradiance_data
df_irradiance_derivative[ , ncol(df_irradiance_derivative) + 1] = derivative_irradiance
}
plot(y=0,x=0, type="l",col = "black",lwd=2,ylim =c(0,1000),xlim=c(0,6000),xlab="",ylab="")
title(xlab=expression(Biomass~kg/m^2),ylab=expression(Derivatives~kg/(m^2~day)),line=2.5)
for (i in c(1:10)){
lines(y=c(unlist(df_irradiance_derivative[i])),x=c(unlist(df_irradiance[i])), type="l",col = "red",lwd=2,ylim =c(0,600),xlab=expression(Biomass~kg/m^2),ylab="Derivative")
}
plot(y=0,x=0,col = "black",lwd=2,ylab="",xlab="",ylim =c(0,6000),xlim=c(0,120))
title(xlab="Time day",ylab=expression(Biomass~kg/m^2),line=2)
for (i in c(1:10)){
lines(c(unlist(df_irradiance[i])), type="l",col = "red",lwd=2,ylim =c(0,1000))
}
df_irradiance <- data.frame(matrix(nrow = end.time, ncol = 0))
df_irradiance_derivative <- data.frame(matrix(nrow = end.time, ncol = 0))
for (i in c(1:10)){
simulated_irradiance_data <- c(NA)
while(sum(is.na(simulated_irradiance_data)) !=0|| (tail(simulated_irradiance_data, n=1)<(Mmax*1000-2000))){
r <- rnorm(1,0.25,0.25)
a <- runif(1,-0.5,0.5)
fi <- runif(1,1/365,182/365)
d_irradiance <- expression((r+(a*sin((2*pi/365)*t+fi))) * x * (1 - x/Mmax))
sde.sim(X0=y0, delta=1, N=(end.time-1), drift=d_irradiance, sigma=s, M = 1)*1000 -> simulated_irradiance_data
sp <-smooth.spline(y=simulated_irradiance_data,x=time.vec,all.knots = TRUE)
derivative_irradiance <- predict(sp, x=time.vec, deriv = 1,)$y
}
df_irradiance[ , ncol(df_irradiance) + 1] = simulated_irradiance_data
df_irradiance_derivative[ , ncol(df_irradiance_derivative) + 1] = derivative_irradiance
}
plot(y=0,x=0, type="l",col = "black",lwd=2,ylim =c(0,1000),xlim=c(0,6000),xlab="",ylab="")
title(xlab=expression(Biomass~kg/m^2),ylab=expression(Derivatives~kg/(m^2~day)),line=2.5)
for (i in c(1:10)){
lines(y=c(unlist(df_irradiance_derivative[i])),x=c(unlist(df_irradiance[i])), type="l",col = "red",lwd=2,ylim =c(0,600),xlab=expression(Biomass~kg/m^2),ylab="Derivative")
}
plot(y=0,x=0,col = "black",lwd=2,ylab="",xlab="",ylim =c(0,6000),xlim=c(0,120))
title(xlab="Time day",ylab=expression(Biomass~kg/m^2),line=2)
for (i in c(1:10)){
lines(c(unlist(df_irradiance[i])), type="l",col = "red",lwd=2,ylim =c(0,1000))
}
df_irradiance <- data.frame(matrix(nrow = end.time, ncol = 0))
df_irradiance_derivative <- data.frame(matrix(nrow = end.time, ncol = 0))
for (i in c(1:10)){
simulated_irradiance_data <- c(NA)
while(sum(is.na(simulated_irradiance_data)) !=0|| (tail(simulated_irradiance_data, n=1)<(Mmax*1000-2000))){
r <- rnorm(1,0.25,0.25)
a <- runif(1,-0.5,0.5)
fi <- runif(1,1/365,182/365)
d_irradiance <- expression((r+(a*sin((2*pi/365)*t+fi))) * x * (1 - x/Mmax))
sde.sim(X0=y0, delta=1, N=(end.time-1), drift=d_irradiance, sigma=s, M = 1)*1000 -> simulated_irradiance_data
sp <-smooth.spline(y=simulated_irradiance_data,x=time.vec,all.knots = TRUE)
derivative_irradiance <- predict(sp, x=time.vec, deriv = 1,)$y
}
df_irradiance[ , ncol(df_irradiance) + 1] = simulated_irradiance_data
df_irradiance_derivative[ , ncol(df_irradiance_derivative) + 1] = derivative_irradiance
}
plot(y=0,x=0, type="l",col = "black",lwd=2,ylim =c(0,1000),xlim=c(0,6000),xlab="",ylab="")
title(xlab=expression(Biomass~kg/m^2),ylab=expression(Derivatives~kg/(m^2~day)),line=2.5)
for (i in c(1:10)){
lines(y=c(unlist(df_irradiance_derivative[i])),x=c(unlist(df_irradiance[i])), type="l",col = "red",lwd=2,ylim =c(0,600),xlab=expression(Biomass~kg/m^2),ylab="Derivative")
}
plot(y=0,x=0,col = "black",lwd=2,ylab="",xlab="",ylim =c(0,6000),xlim=c(0,120))
title(xlab="Time day",ylab=expression(Biomass~kg/m^2),line=2)
for (i in c(1:10)){
lines(c(unlist(df_irradiance[i])), type="l",col = "red",lwd=2,ylim =c(0,1000))
}
df_irradiance <- data.frame(matrix(nrow = end.time, ncol = 0))
df_irradiance_derivative <- data.frame(matrix(nrow = end.time, ncol = 0))
for (i in c(1:10)){
simulated_irradiance_data <- c(NA)
while(sum(is.na(simulated_irradiance_data)) !=0|| (tail(simulated_irradiance_data, n=1)<(Mmax*1000-2000))){
r <- rnorm(1,0.25,0.25)
a <- runif(1,-0.5,0.5)
fi <- runif(1,1/365,182/365)
d_irradiance <- expression((r+(a*sin((2*pi/365)*t+fi))) * x * (1 - x/Mmax))
sde.sim(X0=y0, delta=1, N=(end.time-1), drift=d_irradiance, sigma=s, M = 1)*1000 -> simulated_irradiance_data
sp <-smooth.spline(y=simulated_irradiance_data,x=time.vec,all.knots = TRUE)
derivative_irradiance <- predict(sp, x=time.vec, deriv = 1,)$y
}
df_irradiance[ , ncol(df_irradiance) + 1] = simulated_irradiance_data
df_irradiance_derivative[ , ncol(df_irradiance_derivative) + 1] = derivative_irradiance
}
plot(y=0,x=0, type="l",col = "black",lwd=2,ylim =c(0,1000),xlim=c(0,6000),xlab="",ylab="")
title(xlab=expression(Biomass~kg/m^2),ylab=expression(Derivatives~kg/(m^2~day)),line=2.5)
for (i in c(1:10)){
lines(y=c(unlist(df_irradiance_derivative[i])),x=c(unlist(df_irradiance[i])), type="l",col = "red",lwd=2,ylim =c(0,600),xlab=expression(Biomass~kg/m^2),ylab="Derivative")
}
plot(y=0,x=0,col = "black",lwd=2,ylab="",xlab="",ylim =c(0,6000),xlim=c(0,120))
title(xlab="Time day",ylab=expression(Biomass~kg/m^2),line=2)
for (i in c(1:10)){
lines(c(unlist(df_irradiance[i])), type="l",col = "red",lwd=2,ylim =c(0,1000))
}
df_irradiance <- data.frame(matrix(nrow = end.time, ncol = 0))
df_irradiance_derivative <- data.frame(matrix(nrow = end.time, ncol = 0))
for (i in c(1:10)){
simulated_irradiance_data <- c(NA)
while(sum(is.na(simulated_irradiance_data)) !=0|| (tail(simulated_irradiance_data, n=1)<(Mmax*1000-2000))){
r <- rnorm(1,0.25,0.25)
a <- runif(1,-0.5,0.5)
fi <- runif(1,1/365,182/365)
d_irradiance <- expression((r+(a*sin((2*pi/365)*t+fi))) * x * (1 - x/Mmax))
sde.sim(X0=y0, delta=1, N=(end.time-1), drift=d_irradiance, sigma=s, M = 1)*1000 -> simulated_irradiance_data
sp <-smooth.spline(y=simulated_irradiance_data,x=time.vec,all.knots = TRUE)
derivative_irradiance <- predict(sp, x=time.vec, deriv = 1,)$y
}
df_irradiance[ , ncol(df_irradiance) + 1] = simulated_irradiance_data
df_irradiance_derivative[ , ncol(df_irradiance_derivative) + 1] = derivative_irradiance
}
plot(y=0,x=0, type="l",col = "black",lwd=2,ylim =c(0,1000),xlim=c(0,6000),xlab="",ylab="")
title(xlab=expression(Biomass~kg/m^2),ylab=expression(Derivatives~kg/(m^2~day)),line=2.5)
for (i in c(1:10)){
lines(y=c(unlist(df_irradiance_derivative[i])),x=c(unlist(df_irradiance[i])), type="l",col = "red",lwd=2,ylim =c(0,600),xlab=expression(Biomass~kg/m^2),ylab="Derivative")
}
plot(y=0,x=0,col = "black",lwd=2,ylab="",xlab="",ylim =c(0,6000),xlim=c(0,120))
title(xlab="Time day",ylab=expression(Biomass~kg/m^2),line=2)
for (i in c(1:10)){
lines(c(unlist(df_irradiance[i])), type="l",col = "red",lwd=2,ylim =c(0,1000))
}
df_temperature <- data.frame(matrix(nrow = end.time, ncol = 0))
df_temperature_derivative <- data.frame(matrix(nrow = end.time, ncol = 0))
for (i in c(1:10)){
simulated_temp_data <- c(NA)
while(sum(is.na(simulated_temp_data)) !=0|| (tail(simulated_temp_data, n=1)<(Mmax*1000-2000))){
r <- rnorm(1,0.25,0.25)
TAL= 20000
TL = 292
TAH = 60000
TH = 303
weather_condition <- read.csv("data/simulated_data/netherland 2022-02-01 to 2022-05-31.csv")
temperature_list <- weather_condition$tempmin+20
fit_temperature<- smooth.spline(temperature_list,nknots=10)
temp_t <- fit_temperature$y
#if with temperature tolerance snp(dd), the parameter will be 0.5 so the is less affected by temperature
r.adapt <- (1 + ((exp(TAL/(temp_t + 273) - TAL/TL) + exp(TAH/TH - TAH/(temp_t + 273)))))^{-1}
d_temp <- expression(r.adapt[t]*r * x * (1 - x/Mmax))
sde.sim(X0=y0, delta=1, N=(end.time-1), drift=d_temp, sigma=s, M = 1)*1000 -> simulated_temp_data
sp <-smooth.spline(y=simulated_temp_data,x=time.vec,all.knots = TRUE)
derivative_temp <-  predict(sp, x=time.vec, deriv = 1,)$y
}
#derivative_temp <-D1tr(y=simulated_temp_data, x = time.vec)
#lines(y=c(derivative_temp),x=c(simulated_temp_data),col = "blue",lwd=2)
df_temperature[ , ncol(df_temperature) + 1] = simulated_temp_data
df_temperature_derivative[ , ncol(df_temperature_derivative) + 1] = derivative_temp
}
plot(y=0,x=0, type="l",col = "black",lwd=2,ylim =c(0,1000),xlim=c(0,6000),xlab="",ylab="")
title(xlab=expression(Biomass~kg/m^2),ylab=expression(Derivatives~kg/(m^2~day)),line=2.5)
for (i in c(1:10)){
lines(y=c(unlist(df_temperature_derivative[i])),x=c(unlist(df_temperature[i])), type="l",col = "blue",lwd=2,ylim =c(0,600),xlab=expression(Biomass~kg/m^2),ylab="Derivative")
}
plot(y=0,x=0,col = "black",lwd=2,ylab="",xlab="",ylim =c(0,6000),xlim=c(0,120))
title(xlab="Time day",ylab=expression(Biomass~kg/m^2),line=2)
for (i in c(1:10)){
lines(c(unlist(df_temperature[i])), type="l",col = "blue",lwd=2,ylim =c(0,1000))
}
plot(temp_t,type="l",xlab="Time day",ylab="Temperature ℃",lwd = 2,col="blue")
r.adapt_function <- function(temp_t){
TAL= 20000
TL = 292
TAH = 60000
TH = 303
(1 + ((exp(TAL/(temp_t + 273) - TAL/TL) + exp(TAH/TH - TAH/(temp_t + 273)))))^{-1}
}
temperature = c(0:40)
factor = laply(temperature,r.adapt_function)
plot(x=temperature,factor,type="l",lwd = 2,col="blue",ylab = "r.adapt",xlab="Temperature ℃")
irradiance_effect <- function(t){
a=0.3
fi <- 60/365
a*sin((2*pi/365)*t+fi)
}
t <- c(1:365)
Irradiance.effect = laply(t,irradiance_effect)
plot(y=Irradiance.effect,x=t,type="l",lwd = 2,col="red",xlab="Time day",xlim=c(1,365))
abline(v=120, col="black")
plot(y=0,x=0,col = "black",lwd=2,ylab="",xlab="",ylim =c(0,6000),xlim=c(0,120))
title(xlab="Time day",ylab=expression(Biomass~kg/m^2),line=2)
lines(c(unlist(df_irradiance[i])), type="l",col = "red",lwd=2,ylim =c(0,1000))
plot(y=0,x=0, type="l",col = "black",lwd=2,ylim =c(0,1000),xlim=c(0,6000),xlab="",ylab="")
title(xlab=expression(Biomass~kg/m^2),ylab=expression(Derivatives~kg/(m^2~day)),line=2.5)
lines(y=c(unlist(df_irradiance_derivative[i])),x=c(unlist(df_irradiance[i])), type="l",col = "red",lwd=2,ylim =c(0,600),xlab=expression(Biomass~kg/m^2),ylab="Derivative")
plot(y=0,x=0, type="l",col = "black",lwd=2,ylim =c(0,1000),xlim=c(0,6000),xlab="",ylab="")
title(xlab=expression(Biomass~kg/m^2),ylab=expression(Derivatives~kg/(m^2~day)),line=2.5)
lines(y=c(unlist(df_logistic_derivative[i])),x=c(unlist(df_logistic[i])), type="l",col = "black",lwd=2)
plot(y=0,x=0, type="l",col = "black",lwd=2,ylim =c(0,1000),xlim=c(0,120),xlab="",ylab="")
title(xlab=expression(Time~day),ylab=expression(Derivatives~kg/(m^2~day)),line=2.5)
lines(y=c(unlist(df_logistic_derivative[i])),x=c(time.vec), type="l",col = "black",lwd=2)
r <- 0.15
Mmax<-6000/1000
end.time <-120
time.vec <- 0:119
### Stochastic logistic equation
y0 <- 4.6/1000
d <- expression(r * x * (1 - x/Mmax) )
s <- expression(0*x) #without_noise
sde.sim(X0=y0, delta=1, N=(end.time-1), drift=d, sigma=s, M = 1)*1000-> simulated_logistics_data
####This script generate figures shows in thesis report.####
### Completely clear the working space; It does NOT change your working directory
ls(all = TRUE)
rm(list = ls(all = TRUE))
ls()
ls(all = TRUE)
### Set the working directory, and check
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
#used for getting or setting the library trees that R knows about
.libPaths("library")
#install.packages("sde")
#install.packages("plyr")
library(sde) ### https://rdrr.io/cran/sde/man/sde.sim.html
#library('pspline')
library('splines')
library('sfsmisc') # get the derivative
library("plyr")
library(ggplot2)
# set parameters range
r <- 0.15 #Aa
Mmax_range<-6000
Mmax <- 6000/1000
end.time <-120
time.vec <- 0:119
r <- 0.15
Mmax<-6000/1000
end.time <-120
time.vec <- 0:119
### Stochastic logistic equation
y0 <- 4.6/1000
d <- expression(r * x * (1 - x/Mmax) )
s <- expression(0*x) #without_noise
sde.sim(X0=y0, delta=1, N=(end.time-1), drift=d, sigma=s, M = 1)*1000-> simulated_logistics_data
sp <-smooth.spline(y=simulated_logistics_data,x=time.vec,all.knots = TRUE)
derivative <-  predict(sp, x=time.vec, deriv = 1,)
#lines(y=c(derivative),x=time.vec,col = "red",lwd=2,xlab="Biomass",ylab="Derivative",type="l")
plot(y=c(derivative$y),x=c(simulated_logistics_data), type="l",col = "black",lwd=2,ylim =c(0,500),xlab="",ylab="")
title(xlab=expression(Biomass~kg/m^2),ylab=expression(Derivatives~kg/(m^2~day)),line=2.5)
# df[ , ncol(df) + 1] = simulated_logistics_data
# df[ , ncol(df) + 1] = derivative
r <- 0.05 #Aa
a <- 0.3
fi <- 0.01168281 #runif(1,1/365,182/365)
d_irradiance <- expression((r+(a*sin((2*pi/365)*t+fi))) * x * (1 - x/Mmax))
sde.sim(X0=y0, delta=1, N=(end.time-1), drift=d_irradiance, sigma=s, M = 1)*1000 -> simulated_irradiance_data
sp <-smooth.spline(y=simulated_irradiance_data,x=time.vec,all.knots = TRUE)
derivative_irradiance <- predict(sp, x=time.vec, deriv = 1,)$y
#derivative_irradiance <-D1tr(y=simulated_irradiance_data, x = time.vec)
lines(y=c(derivative_irradiance),x=c(simulated_irradiance_data),col = "red",lwd=2)
#plot(derivative_irradiance)
r <- 0.15
Ma <- runif(1,0,y0) #yo>Ma
d_Allee <- expression(r*x*(1 - x/Mmax)*(x/(x + Ma))) #dM <- r*M*(1 - M/Mx)*(M/(M + Ma))
sde.sim(X0=y0, delta=1, N=(end.time-1), drift=d_Allee, sigma=s, M = 1)*1000 -> simulated_Allee_data
sp <-smooth.spline(y=simulated_Allee_data,x=time.vec,all.knots = TRUE)
derivative_Allee <-  predict(sp, x=time.vec, deriv = 1,)$y
#derivative_Allee <-D1tr(y=simulated_Allee_data, x = time.vec)
lines(y=c(derivative_Allee),x=c(simulated_Allee_data),col = "green",lwd=2)
r=0.3
TAL= 20000
TL = 292
TAH = 60000
TH = 303
weather_condition <- read.csv("data/simulated_data/netherland 2022-02-01 to 2022-05-31.csv")
temperature_list <- weather_condition$tempmin+20
fit_temperature<- smooth.spline(temperature_list,nknots=10)
temp_t <- fit_temperature$y
#if with temperature tolerance snp(dd), the parameter will be 0.5 so the is less affected by temperature
r.adapt <- (1 + ((exp(TAL/(temp_t + 273) - TAL/TL) + exp(TAH/TH - TAH/(temp_t + 273)))))^{-1}
d_temp <- expression(r.adapt[t]*r * x * (1 - x/Mmax))
sde.sim(X0=y0, delta=1, N=(end.time-1), drift=d_temp, sigma=s, M = 1)*1000 -> simulated_temp_data
sp <-smooth.spline(y=simulated_temp_data,x=time.vec,all.knots = TRUE)
derivative_temp <-  predict(sp, x=time.vec, deriv = 1,)$y
#derivative_temp <-D1tr(y=simulated_temp_data, x = time.vec)
lines(y=c(derivative_temp),x=c(simulated_temp_data),col = "blue",lwd=2)
legend(x = "topright",
legend = c("Logistic", "Irradiane","Allee","Temperature"),
lty = c(1, 1,1,1),           # Line types
col = c("black","red","green","blue"),           # Line colors
lwd = 1,
cex=0.7)
plot(simulated_logistics_data,col = "black",lwd=2,ylab="",xlab="")
title(xlab="Time day",ylab=expression(Biomass~kg/m^2),line=2)
lines(simulated_irradiance_data,col = "red",lwd=2)
lines(simulated_Allee_data,col = "green",lwd=2)
lines(simulated_temp_data,col = "blue",lwd=2)
legend(x = "bottomright",
legend = c("Logistic", "Irradiane","Allee","Temperature"),
lty = c(1, 1,1,1),           # Line types
col = c("black","red","green","blue"),           # Line colors
lwd = 2,
cex=1)
#
plot(temp_t,type="l",xlab="Time day",ylab="Temperature ℃",lwd = 2,col="blue")
r.adapt_function <- function(temp_t){
TAL= 20000
TL = 292
TAH = 60000
TH = 303
(1 + ((exp(TAL/(temp_t + 273) - TAL/TL) + exp(TAH/TH - TAH/(temp_t + 273)))))^{-1}
}
temperature = c(0:40)
factor = laply(temperature,r.adapt_function)
plot(x=temperature,factor,type="l",lwd = 2,col="blue",ylab = "r.adapt",xlab="Temperature ℃")
irradiance_effect <- function(t){
a=0.3
fi <- 60/365
a*sin((2*pi/365)*t+fi)
}
t <- c(1:365)
Irradiance.effect = laply(t,irradiance_effect)
plot(y=Irradiance.effect,x=t,type="l",lwd = 2,col="red",xlab="Time day",xlim=c(1,365))
abline(v=120, col="black")
plot(simulated_logistics_data,col = "black",lwd=2,ylab="",xlab="")
title(xlab="Time day",ylab=expression(Biomass~kg/m^2),line=2)
lines(simulated_irradiance_data,col = "red",lwd=2)
#lines(simulated_Allee_data,col = "green",lwd=2)
lines(simulated_temp_data,col = "blue",lwd=2)
legend(x = "bottomright",
legend = c("Logistic", "Irradiane","Temperature"),
lty = c(1, 1,1,1),           # Line types
col = c("black","red","blue"),           # Line colors
lwd = 2,
cex=1)
#
plot(simulated_logistics_data,col = "black",lwd=2,ylab="",xlab="")
title(xlab="Time day",ylab=expression(Biomass~kg/m^2),line=2)
lines(simulated_irradiance_data,col = "red",lwd=2)
#lines(simulated_Allee_data,col = "green",lwd=2)
lines(simulated_temp_data,col = "blue",lwd=2)
plot(simulated_logistics_data,col = "black",lwd=2,ylab="",xlab="")
title(xlab="Time day",ylab=expression(Biomass~kg/m^2),line=2)
lines(simulated_irradiance_data,col = "red",lwd=2)
#lines(simulated_Allee_data,col = "green",lwd=2)
lines(simulated_temp_data,col = "blue",lwd=2)
legend(x = "bottomright",
legend = c("Logistic", "Irradiane","Temperature"),
lty = c(1, 1,1,1),           # Line types
col = c("black","red","blue"),           # Line colors
lwd = 2,
cex=1)
#
