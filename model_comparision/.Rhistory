#the function to minimize
ModelCost <- function(parms) {
out <- ode(y = y0, times = t, func = logistic, parms = parms)
out
return(modCost(model=out,obs=biomass_time_df,X="time",y="M"))  # object of class modCost
}
Fit <- modFit(f = ModelCost, p = parms)
# model_eqn <- expression(dMdt == r * M * (1 - M / Mmax))
#the function to minimize
ModelCost <- function(parms) {
out <- ode(y = y0, times = t, func = logistic, parms = parms)
out
return(modCost(model=out,obs=biomass_time_df,X="time",y=NULL))  # object of class modCost
}
Fit <- modFit(f = ModelCost, p = parms)
out <- ode(y = c(N = Fit$par[["N0"]]), func = logist, parms = Fit$par,
times = t)
View(Fit)
Fit[["par"]]
out <- ode(y = y0, func = logist, parms = Fit$par,
times = t)
out <- ode(y = y0, func = logistic, parms = Fit$par,
times = t)
lines(out, col = "blue")
# model_eqn <- expression(dMdt == r * M * (1 - M / Mmax))
#the function to minimize
ModelCost <- function(parms) {
out <- ode(y = y0, times = t, func = logistic, parms = parms)
return(modCost(model=out,obs=biomass_time_df.T,X="time",y=NULL))  # object of class modCost
}
Fit <- modFit(f = ModelCost, p = parms)
# model_eqn <- expression(dMdt == r * M * (1 - M / Mmax))
#the function to minimize
ModelCost <- function(parms) {
out <- ode(y = y0, times = t, func = logistic, parms = parms)
return(modCost(model=out,obs=biomass_time_df$M,X="time",y=NULL))  # object of class modCost
}
Fit <- modFit(f = ModelCost, p = parms)
# model_eqn <- expression(dMdt == r * M * (1 - M / Mmax))
#the function to minimize
ModelCost <- function(parms) {
out <- ode(y = y0, times = t, func = logistic, parms = parms)
return(modCost(model=out,obs=biomass_time_df,X="time",y=NULL))  # object of class modCost
}
Fit <- modFit(f = ModelCost, p = parms)
out <- ode(y = y0, func = logistic, parms = Fit$par,
times = t)
lines(out, col = "blue")
parms <- c(r = 0.1, Mmax = max(M))
# #use desolve to fit the data
fit <- ode(y = y0, times = t, func = logistic, parms = parms)
parms
#
plot(t, M, pch = 16, xlab = "Time", ylab = "M")
lines(fit, col = "red")
biomass_time_df <-data.frame(unlist(M),unlist(t))
names(biomass_time_df) = c("M","time")
# model_eqn <- expression(dMdt == r * M * (1 - M / Mmax))
#the function to minimize
ModelCost <- function(parms) {
out <- ode(y = y0, times = t, func = logistic, parms = parms)
return(modCost(model=out,obs=biomass_time_df,X="time",y=NULL))  # object of class modCost
}
Fit <- modFit(f = ModelCost, p = parms)
out <- ode(y = y0, func = logistic, parms = Fit$par,
times = t)
View(fit)
#load data
data = read.table("data/Emerald1983g048.txt")
#define function
logistic <- function(t, y, parms) {
with(as.list(parms,y), {
dMdt <- r * y * (1 - y / Mmax)
return(list(dMdt))
})
}
#x and y
M <-data$biomass
t <- data$das
y0 <- c(M = M[1])
parms <- c(r = 0.1, Mmax = max(M))
# # #use desolve to fit the data
# fit <- ode(y = y0, times = t, func = logistic, parms = parms)
# parms
#
plot(t, M, pch = 16, xlab = "Time", ylab = "M")
lines(fit, col = "red")
biomass_time_df <-data.frame(unlist(M),unlist(t))
names(biomass_time_df) = c("M","time")
eSolve")
eSolve")
# loading library
library("deSolve")
library("rootSolve")
library("coda")
library("FME")
library('pspline')
#set current directory as working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# loading library
library("deSolve")
library("rootSolve")
library("coda")
library("FME")
library('pspline')
#set current directory as working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
#load data
data = read.table("data/Emerald1983g048.txt")
#define function
logistic <- function(t, y, parms) {
with(as.list(parms,y), {
dMdt <- r * y * (1 - y / Mmax)
return(list(dMdt))
})
}
#x and y
M <-data$biomass
t <- data$das
y0 <- c(M = M[1])
parms <- c(r = 0.1, Mmax = max(M))
# # #use desolve to fit the data
# fit <- ode(y = y0, times = t, func = logistic, parms = parms)
# parms
#
plot(t, M, pch = 16, xlab = "Time", ylab = "M")
lines(fit, col = "red")
biomass_time_df <-data.frame(unlist(M),unlist(t))
names(biomass_time_df) = c("M","time")
# model_eqn <- expression(dMdt == r * M * (1 - M / Mmax))
#the function to minimize
ModelCost <- function(parms) {
out <- ode(y = y0, times = t, func = logistic, parms = parms)
return(modCost(model=out,obs=biomass_time_df,X="time",y=NULL))  # object of class modCost
}
Fit <- modFit(f = ModelCost, p = parms)
out <- ode(y = y0, func = logistic, parms = Fit$par,
times = t)
lines(out, col = "blue")
View(Fit)
View(Fit)
parms <- c(r = 0.5, Mmax = max(M))
# model_eqn <- expression(dMdt == r * M * (1 - M / Mmax))
#the function to minimize
ModelCost <- function(parms) {
out <- ode(y = y0, times = t, func = logistic, parms = parms)
return(modCost(model=out,obs=biomass_time_df,X="time",y=NULL))  # object of class modCost
}
Fit <- modFit(f = ModelCost, p = parms)
out <- ode(y = y0, func = logistic, parms = Fit$par,
times = t)
lines(out, col = "blue")
parms
Fit <- modFit(f = ModelCost, p = parms)
summary(Fit)
View(biomass_time_df)
View(biomass_time_df)
biomass_time_df <-data.frame(unlist(t),unlist(M))
names(biomass_time_df) = c("M","time") #rename
#the function to minimize
ModelCost <- function(parms) {
out <- ode(y = y0, times = t, func = logistic, parms = parms)
return(modCost(model=out,obs=biomass_time_df,X="time",y=NULL))  # object of class modCost
}
parms
Fit <- modFit(f = ModelCost, p = parms)
summary(Fit)
out <- ode(y = y0, func = logistic, parms = Fit$par,
times = t)
lines(out, col = "blue")
parms <- c(r = 0.1, Mmax = max(M))
# # #use desolve to fit the data
# fit <- ode(y = y0, times = t, func = logistic, parms = parms)
# parms
#
plot(t, M, pch = 16, xlab = "Time", ylab = "M")
lines(fit, col = "red")
biomass_time_df <-data.frame(unlist(t),unlist(M))
names(biomass_time_df) = c("M","time") #rename
#the function to minimize
ModelCost <- function(parms) {
out <- ode(y = y0, times = t, func = logistic, parms = parms)
return(modCost(model=out,obs=biomass_time_df,X="time",y=NULL))  # object of class modCost
}
parms
Fit <- modFit(f = ModelCost, p = parms)
summary(Fit)
out <- ode(y = y0, func = logistic, parms = Fit$par,
times = t)
lines(out, col = "blue")
return(modCost(model=out,obs=biomass_time_df,X="time",y="M"))  # object of class modCost
#the function to minimize
ModelCost <- function(parms) {
out <- ode(y = y0, times = t, func = logistic, parms = parms)
return(modCost(model=out,obs=biomass_time_df,X="time",y="M"))  # object of class modCost
}
parms
Fit <- modFit(f = ModelCost, p = parms)
biomass_time_df <-data.frame(unlist(data$Env),unlist(t),unlist(M))
names(biomass_time_df) = c("M","time") #rename
#the function to minimize
ModelCost <- function(parms) {
out <- ode(y = y0, times = t, func = logistic, parms = parms)
return(modCost(model=out,obs=biomass_time_df,X="time",y="M"))  # object of class modCost
}
parms
Fit <- modFit(f = ModelCost, p = parms)
biomass_time_df <-data.frame(unlist(t),unlist(M))
names(biomass_time_df) = c("M","time") #rename
#the function to minimize
ModelCost <- function(parms) {
out <- ode(y = y0, times = t, func = logistic, parms = parms)
return(modCost(model=out,obs=biomass_time_df,X="time",y="M"))  # object of class modCost
}
parms
Fit <- modFit(f = ModelCost, p = parms)
summary(Fit)
out <- ode(y = y0, func = logistic, parms = Fit$par,
times = t)
# install.packages("deSolve")
# install.packages("FME")
install.packages("pspline")
# loading library
library("deSolve")
library("rootSolve")
library("coda")
library("FME")
library('pspline')
#set current directory as working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
#load data
data = read.table("data/Emerald1983g048.txt")
# fit <- smooth.Pspline(data$das, data$biomass)
# lines(fit, col = "blue")
# plot(data$das, data$biomass)
#define function
logistic <- function(t, y, parms) {
with(as.list(parms,y), {
dMdt <- r * y * (1 - y / Mmax)
return(list(dMdt))
})
}
#x and y
M <-data$biomass
t <- data$das
y0 <- c(M = M[1])
parms <- c(r = 0.1, Mmax = max(M))
# # #use desolve to fit the data
# fit <- ode(y = y0, times = t, func = logistic, parms = parms)
# parms
#
plot(t, M, pch = 16, xlab = "Time", ylab = "M")
lines(fit, col = "red")
install.packages("pspline")
library("deSolve")
library("rootSolve")
library("coda")
library("FME")
library('pspline')
#set current directory as working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
#load data
data = read.table("data/Emerald1983g048.txt")
# fit <- smooth.Pspline(data$das, data$biomass)
# lines(fit, col = "blue")
# plot(data$das, data$biomass)
#define function
logistic <- function(t, y, parms) {
with(as.list(parms,y), {
dMdt <- r * y * (1 - y / Mmax)
return(list(dMdt))
})
}
#x and y
M <-data$biomass
t <- data$das
y0 <- c(M = M[1])
parms <- c(r = 0.1, Mmax = max(M))
# # #use desolve to fit the data
# fit <- ode(y = y0, times = t, func = logistic, parms = parms)
# parms
#
plot(t, M, pch = 16, xlab = "Time", ylab = "M")
# lines(fit, col = "red")
biomass_time_df <-data.frame(unlist(t),unlist(M))
names(biomass_time_df) = c("M","time") #rename
#the function to minimize
ModelCost <- function(parms) {
out <- ode(y = y0, times = t, func = logistic, parms = parms)
return(modCost(model=out,obs=biomass_time_df,X="time",y="M"))  # object of class modCost
}
parms
Fit <- modFit(f = ModelCost, p = parms)
summary(Fit)
out <- ode(y = y0, func = logistic, parms = Fit$par,
times = t)
lines(out, col = "blue")
t <- data$das
out <- ode(y = y0, func = logistic, parms = Fit$par,
times = t)
lines(out, col = "blue")
Fit <- modFit(f = ModelCost, p = parms, method = "Port")
#the function to minimize
ModelCost <- function(parms) {
out <- ode(y = y0, times = t, func = logistic, parms = parms)
return(modCost(model=out,obs=biomass_time_df,X="time",y=NULL))  # object of class modCost
}
parms
Fit <- modFit(f = ModelCost, p = parms, method = "Port")
#the function to minimize
ModelCost <- function(parms) {
out <- ode(y = y0, times = t, func = logistic, parms = parms)
return(modCost(model=out,obs=biomass_time_df,X="time",y=NULL))  # object of class modCost
}
parms
Fit <- modFit(f = ModelCost, p = parms, method = "Port")
summary(Fit)
out <- ode(y = y0, func = logistic, parms = Fit$par,
times = t)
lines(out, col = "blue")
out
Fit$par
#the function to minimize
ModelCost <- function(parms) {
out <- ode(y = y0, times = t, func = logistic, parms = parms)
return(modCost(model=out,obs=biomass_time_df,x="time",y=NULL))  # object of class modCost
}
Fit <- modFit(f = ModelCost, p = parms, method = "Port") #fit the curve which minimize the ModelCost
summary(Fit)
Fit <- modFit(f = ModelCost, p = parms, method = "MQRT") #fit the curve which minimize the ModelCost
Fit <- modFit(f = ModelCost, p = parms, method = "Marq") #fit the curve which minimize the ModelCost
summary(Fit)
#the function to minimize
ModelCost <- function(parms) {
out <- ode(y = y0, times = t, func = logistic, parms = parms)
return(modCost(model=out,obs=biomass_time_df,x="time",y=NULL))  # object of class modCost
}
Fit <- modFit(f = ModelCost, p = parms, method = "Marq") #fit the curve which minimize the ModelCost
summary(Fit)
return(modCost(model=out,obs=biomass_time_df,x="time",y="M"))  # object of class modCost
#the function to minimize
ModelCost <- function(parms) {
out <- ode(y = y0, times = t, func = logistic, parms = parms)
return(modCost(model=out,obs=biomass_time_df,y="M"))  # object of class modCost
}
Fit <- modFit(f = ModelCost, p = parms, method = "Marq") #fit the curve which minimize the ModelCost
#the function to minimize
ModelCost <- function(parms) {
out <- ode(y = y0, times = t, func = logistic, parms = parms)
modCost(model=out,obs=biomass_time_df,y="M")  # object of class modCost
}
Fit <- modFit(f = ModelCost, p = parms, method = "Marq") #fit the curve which minimize the ModelCost
#the function to minimize
ModelCost <- function(parms) {
out <- ode(y = y0, times = t, func = logistic, parms = parms)
out
modCost(model=out,obs=biomass_time_df,y="M")  # object of class modCost
}
Fit <- modFit(f = ModelCost, p = parms, method = "Marq") #fit the curve which minimize the ModelCost
View(out)
#the function to minimize
ModelCost <- function(parms) {
out <- ode(y = y0, times = t, func = logistic, parms = parms)
out
modCost(model=out,obs=biomass_time_df,y=1)  # object of class modCost
}
Fit <- modFit(f = ModelCost, p = parms, method = "Marq") #fit the curve which minimize the ModelCost
#x and y
M <-as.numeric(data$biomass)
t <- as.numeric(data$das)
y0 <- c(M = M[1])
parms <- c(r = 0.1, Mmax = max(M))
# #use desolve to fit the data
# fit <- ode(y = y0, times = t, func = logistic, parms = parms)
# parms
#
plot(t, M, pch = 16, xlab = "Time", ylab = "M")
biomass_time_df <-data.frame(unlist(t),unlist(M))
names(biomass_time_df) = c("M","time") #rename
#the function to minimize
ModelCost <- function(parms) {
out <- ode(y = y0, times = t, func = logistic, parms = parms)
out
modCost(model=out,obs=biomass_time_df,y=1)  # object of class modCost
}
Fit <- modFit(f = ModelCost, p = parms, method = "Marq") #fit the curve which minimize the ModelCost
#the function to minimize
ModelCost <- function(parms) {
out <- ode(y = y0, times = t, func = logistic, parms = parms)
out
modCost(model=out,obs=biomass_time_df,y="M")  # object of class modCost
}
Fit <- modFit(f = ModelCost, p = parms, method = "Marq") #fit the curve which minimize the ModelCost
#the function to minimize
ModelCost <- function(parms) {
out <- ode(y = y0, times = t, func = logistic, parms = parms)
out
modCost(model=as.numeric(out),obs=biomass_time_df,y="M")  # object of class modCost
}
Fit <- modFit(f = ModelCost, p = parms, method = "Marq") #fit the curve which minimize the ModelCost
#the function to minimize
ModelCost <- function(parms) {
out <- ode(y = y0, times = t, func = logistic, parms = parms)
out
modCost(model=as.numeric(out),obs=biomass_time_df,y="M")  # object of class modCost
}
Fit <- modFit(f = ModelCost, p = parms, method = "Marq") #fit the curve which minimize the ModelCost
View(out)
View(out)
View(out)
str(out)
str(out$time)
View(Fit)
View(out)
#the function to minimize
ModelCost <- function(parms) {
modelout <- ode(y = y0, times = t, func = logistic, parms = parms)
modelout
modCost(model=modelout,obs=biomass_time_df,y="M")  # object of class modCost
}
Fit <- modFit(f = ModelCost, p = parms, method = "Marq") #fit the curve which minimize the ModelCost
biomass_time_df <-data.frame(time=unlist(t),M=unlist(M))
View(biomass_time_df)
rownames(biomass_time_df) <- "OBS1"
rownames(biomass_time_df) <- rep("OBS1")
#the function to minimize
ModelCost <- function(parms) {
modelout <- ode(y = y0, times = t, func = logistic, parms = parms)
modelout
modCost(model=modelout,obs=biomass_time_df,y="M")  # object of class modCost
}
rownames(biomass_time_df) <- rep("OBS1",length(t))
rownames(biomass_time_df) <- c(1:length(t)+1)
View(biomass_time_df)
View(biomass_time_df)
rownames(biomass_time_df) <- c(1:length(t))
#the function to minimize
ModelCost <- function(parms) {
modelout <- ode(y = y0, times = t, func = logistic, parms = parms)
modelout
modCost(model=modelout,obs=biomass_time_df,y="M")  # object of class modCost
}
Fit <- modFit(f = ModelCost, p = parms, method = "Marq") #fit the curve which minimize the ModelCost
#the function to minimize
ModelCost <- function(parms) {
modelout <- ode(y = y0, times = t, func = logistic, parms = parms)
modelout
modCost(model=c(modelout$M,modelout$time),obs=biomass_time_df,y="M")  # object of class modCost
}
Fit <- modFit(f = ModelCost, p = parms, method = "Marq") #fit the curve which minimize the ModelCost
modelout
# names(biomass_time_df) = c("M","time") #rename
modelout <- ode(y = y0, times = t, func = logistic, parms = parms)
View(modelout)
#the function to minimize
ModelCost <- function(parms) {
modelout <- ode(y = y0, times = t, func = logistic, parms = parms)
modelout
modCost(model=c(modelout['M'],modelout['time']),obs=biomass_time_df,y="M")  # object of class modCost
}
Fit <- modFit(f = ModelCost, p = parms, method = "Marq") #fit the curve which minimize the ModelCost
#the function to minimize
ModelCost <- function(parms) {
modelout <- ode(y = y0, times = t, func = logistic, parms = parms)
modelout
modCost(model=data.frame(M=modelout['M'],time=modelout['time']),obs=biomass_time_df,y="M")  # object of class modCost
}
Fit <- modFit(f = ModelCost, p = parms, method = "Marq") #fit the curve which minimize the ModelCost
#the function to minimize
ModelCost <- function(parms) {
modelout <- ode(y = y0, times = t, func = logistic, parms = parms)
modelout
modCost(model=data.frame(M=modelout['M'],time=modelout['time']),obs=biomass_time_df,y="M")  # object of class modCost
}
Fit <- modFit(f = ModelCost, p = parms, method = "Marq") #fit the curve which minimize the ModelCost
#the function to minimize
ModelCost <- function(parms) {
modelout <- as.data.frame(ode(y = y0, times = t, func = logistic, parms = parms))
modelout
modCost(model=modelout,obs=biomass_time_df,y="M")  # object of class modCost
}
Fit <- modFit(f = ModelCost, p = parms, method = "Marq") #fit the curve which minimize the ModelCost
biomass_time_df <-data.frame(time=unlist(t),M=unlist(M))
rownames(biomass_time_df) <- c(1:length(t))
#the function to minimize
ModelCost <- function(parms) {
modelout <- as.data.frame(ode(y = y0, times = t, func = logistic, parms = parms))
modelout
modCost(model=modelout,obs=biomass_time_df,y="M")  # object of class modCost
}
Fit <- modFit(f = ModelCost, p = parms, method = "Marq") #fit the curve which minimize the ModelCost
y0
biomass_time_df <-data.frame(name=rep("M",length(t)),time=unlist(t),M=unlist(M))
View(biomass_time_df)
#the function to minimize
ModelCost <- function(parms) {
modelout <- as.data.frame(ode(y = y0, times = t, func = logistic, parms = parms))
modelout
modCost(model=modelout,obs=biomass_time_df,y="M")  # object of class modCost
}
Fit <- modFit(f = ModelCost, p = parms, method = "Marq") #fit the curve which minimize the ModelCost
summary(Fit)
out <- ode(y = y0, func = logistic, parms = Fit$par,
times = t)
Fit$par
out
lines(out, col = "blue")
Fit$par
