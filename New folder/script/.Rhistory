cex.lab <- 1.6
# load data
# load non-collinear markers
load(paste(TRAIT, "/DHs.nonColl_list.RData", sep = ""))
str(nonColl_list)
# geno and map
load(paste("geno_InfoList_DH_m", nSNPs, "s", steps, ".RData", sep = ""))
str(InfoList)
str(geno)
Envs <- read.table(paste0(TRAIT, "/", list.files(path = TRAIT, pattern = ".phenotypes_order.txt")), stringsAsFactors = FALSE)
Envs <- Envs[,1]
Envs
# run for each environment (and for the across-environment-BLUEs)
for (Env_i in 1:length(Envs)){
ENV <- Envs[Env_i]
print(ENV)
path <- paste(TRAIT, "/output", sep ="")
## load GWAS results
if(file.exists(paste(path, "/", TRAIT, "_", ENV, ".assoc.txt", sep =""))){
system(paste("gzip ", file.path(path, paste(TRAIT, "_", ENV, ".assoc.txt", sep = "")), sep =""))
}
GWASresults <- read.table(paste(path, "/", TRAIT, "_", ENV, ".assoc.txt.gz", sep =""), header = TRUE)
## load again phenotypic data and calculate environment-specific standard deviation
pheno_trait <- read.table(paste(TRAIT, "/", list.files(path = TRAIT, pattern = ".pheno.txt"), sep =""), header = FALSE)
pheno_trait <- pheno_trait[,Env_i]
sd_pheno <- sd(pheno_trait, na.rm = TRUE)
print(paste("sd_pheno", sd_pheno))
## calculate FDR-threshold
# take non-collinear markers into account
nonColl_marker <- nonColl_list[[ENV]]
GWASresults_nonColl <- GWASresults[which(GWASresults$rs %in% nonColl_marker), ]
# adjust p-values according to FDR (Benjamini and Hochberg)
p.adjusted_BH <- p.adjust(GWASresults_nonColl$p_lrt, method = "BH")
# calculate significance threshold
FDR0.15 <- ((length(which(p.adjusted_BH < 0.15)) + 1) / length(GWASresults_nonColl$p_lrt)) * 0.15
print(paste("-log10 FDR0.15", -log10(FDR0.15)))
# define trait-associated haplotypes
# p-values were calculated for all markers, also including haplotypes with r2=1, as these need to be considered for defining the QTL regions in a later step
hits_FDR0.15 <- GWASresults$rs[which(GWASresults$p_lrt <= FDR0.15)]
print(paste("FDR0.15:", length(hits_FDR0.15), "sig. markers"))
## generate Manhattan-plot
if(length(hits_FDR0.15) == 0){
highlight <- NULL
} else {
highlight <- hits_FDR0.15
}
# highlight all markers with a significant favorable/unfavorable effect
if(gsub("BLUE.", "", TRAIT) %in% gsub("BLUE.", "", c(	'EV_V4', 'EV_V6',
'PH_V4', 'PH_V6',
'PH_final'))){
highlight_fav <- GWASresults$rs[which(GWASresults$beta > 0)]
} else {
#MF, FF, LO, TILL
highlight_fav <- GWASresults$rs[which(GWASresults$beta < 0)]
}
highlight_fav <- highlight_fav[which(highlight_fav %in% hits_FDR0.15)]
highlight_unfav <- highlight[which((highlight %in% highlight_fav) == FALSE)]
info_list_temp <- InfoList[GWASresults$rs, ]
GWASresults$Start_bp <- info_list_temp[,2]
GWASresults$End_bp <- info_list_temp[,3]
#
# this section is for plotting every haplotype as a line from it's start to it's end position
# however, the plotting can take a while (especially on local desktop machines), therefore it is not run here
# it only matters when you zoom into specific regions, in a genome-wide view all haplotypes appear more or less like a dot anyways
#
#png(paste(outfolder, "/", TRAIT, "_", ENV, "_Manhattan_hap.png", sep =""), width = 3000, height = 1400, res = 200)
#par(mar = c(5, 5, 4, 2) + 0.1)
#res <- NULL
#cols <- cols_manhattan
#col_i <- 2
#for(CHR in sort(unique(GWASresults$chr))){
#col_i <- ifelse(col_i == 2, 1, 2)
#temp <- GWASresults[which(GWASresults$chr == CHR), ]
#rownames(temp) <- temp$rs
#temp <- temp[ , c("Start_bp", "End_bp", "p_lrt")]
#temp$Start_bp <- temp$Start_bp + sum(chr_size_temp[1:CHR])
#temp$End_bp <- temp$End_bp + sum(chr_size_temp[1:CHR])
#temp$p_lrt <- -log10(temp$p_lrt)
#temp$cols <- rep(cols[col_i], nrow(temp))
#res <- rbind(res, temp)
#rm(temp)
#}
#plot(x = -100, y = -100, xlim = c(0, sum(chr_size_temp)), ylim = c(0, max(c(res$p_lrt, -log10(c(FDR0.15)))*1.04)), main = paste(TRAIT, "_", ENV, " Manhattan (FDR 15%)"), ylab = expression(-log[10](italic(p))), xlab = "Chromosome", xaxt = "n", cex.axis = cex.axis, cex.lab = cex.lab, cex = cex)
#
#abline(h = -log10(c(FDR0.15)), col = c("darkorange2"), lwd = 1.3)
#legend("topright", lwd = 2, lty = 1, col = c("darkorange2"), legend = c("FDR 15%"), cex = 0.9, bty = "n")
#axis(side = 1, at = chr_axis_at, labels = 1:10, cex.axis = cex.axis, cex.lab = cex.lab, cex = cex)
#apply(res, 1, manhat_plot_f, lwd = 3)
#if (length(highlight_unfav) > 0) {
#	res[highlight_unfav, "cols"] <- rgb(0.9, 0, 0, alpha = 0.75)
#	apply(res[highlight_unfav, ], 1, manhat_plot_f, lwd = 4.5)
#}
#if (length(highlight_fav) > 0) {
#	res[highlight_fav, "cols"] <- rgb(0.1, 0.45, 1.00, alpha = 0.95)
#	apply(res[highlight_fav, ], 1, manhat_plot_f, lwd = 4.5)
#}
#dev.off()
png(paste(outfolder, "/", TRAIT, "_", ENV, "_Manhattan.png", sep =""), width = 3000, height = 1400, res = 200)
par(mar = c(5, 5, 4, 2) + 0.1)
res <- NULL
cols <- cols_manhattan
col_i <- 2
for(CHR in sort(unique(GWASresults$chr))){
col_i <- ifelse(col_i == 2, 1, 2)
temp <- GWASresults[which(GWASresults$chr == CHR), ]
rownames(temp) <- temp$rs
temp <- temp[ , c("Start_bp", "End_bp", "p_lrt")]
temp$Start_bp <- temp$Start_bp + sum(chr_size_temp[1:CHR])
temp$End_bp <- temp$End_bp + sum(chr_size_temp[1:CHR])
temp$p_lrt <- -log10(temp$p_lrt)
temp$cols <- rep(cols[col_i], nrow(temp))
res <- rbind(res, temp)
rm(temp)
}
plot(x = -100, y = -100, xlim = c(0, sum(chr_size_temp)), ylim = c(0, max(c(res$p_lrt, -log10(c(FDR0.15)))*1.04)), main = paste(TRAIT, "_", ENV, " Manhattan (FDR 15%)"), ylab = expression(-log[10](italic(p))), xlab = "Chromosome", xaxt = "n", cex.axis = cex.axis, cex.lab = cex.lab, cex = cex)
abline(h = -log10(c(FDR0.15)), col = c("darkorange2"), lwd = 1.3)
legend("topright", lwd = 2, lty = 1, col = c("darkorange2"), legend = c("FDR 15%"), cex = 0.9, bty = "n")
axis(side = 1, at = chr_axis_at, labels = 1:10, cex.axis = cex.axis, cex.lab = cex.lab, cex = cex)
points(x = apply(res[ , c(1,2)], 1, mean), y = res$p_lrt, pch = 20, col = res$cols, cex = cex)
if (length(highlight_unfav) > 0) {
res[highlight_unfav, "cols"] <- rgb(0.9, 0, 0, alpha = 0.75)
apply(res[highlight_unfav, ], 1, manhat_plot_f, lwd = 4.5)
}
if (length(highlight_fav) > 0) {
res[highlight_fav, "cols"] <- rgb(0.1, 0.45, 1.00, alpha = 0.95)
apply(res[highlight_fav, ], 1, manhat_plot_f, lwd = 4.5)
}
dev.off()
# generate QQ-plot
png(paste(outfolder, "/", TRAIT, "_", ENV, "_QQ.png", sep =""), width = 1400, height = 1400, res = 200)
par(mar = c(5, 4, 4, 2) + 0.1)
res <- GWASresults_nonColl
pvector <- res$p_lrt
names(pvector) <- res$rs
o = -log10(sort(pvector, decreasing = FALSE))
e = -log10(ppoints(length(pvector)))
plot(x = e, y = o, pch = 1, xlim = c(0, max(e)), ylim = c(0, max(o)), xlab = expression(Expected ~ ~-log[10](italic(p))),
ylab = expression(Observed ~ ~-log[10](italic(p))), col = cols_manhattan[2], lwd = 1.5, main = paste(TRAIT, ENV, "QQ"))
abline(0, 1, col = "red")
dev.off()
## write out significant haplotypes
rownames(GWASresults) <- GWASresults$rs
Effects <- GWASresults$beta
GWASresults <- cbind(GWASresults, Effects)
# write out each hit
if(length(highlight) != 0){
regions <- GWASresults[highlight, c("chr", "Start_bp", "End_bp", "af", "p_lrt", "Effects")]
regions <- regions[order(regions[,1], regions[,2], regions[,3]),]
regions <- cbind(regions, regions[,6] / sd_pheno)
colnames(regions) <- c("Chr", "Start_bp", "End_bp", "allele_freq", "pvalue", "effect", "effect_prop_sd")
write.table(regions, file = paste(outfolder, "/Hits_", TRAIT, "_", ENV, "_FDR0.15.csv", sep =""), sep = ";" , dec=".", row.names = T, col.names = NA)
} else {
regions <- matrix(rep(NA, 7), ncol = 7)
colnames(regions) <- c("Chr", "Start_bp", "End_bp", "maf", "pvalue", "effect", "effect_prop_sd")
write.table(regions, file = paste(outfolder, "/Hits_", TRAIT, "_", ENV, "_FDR0.15.csv", sep =""), sep = ";" , dec=".", row.names = T, col.names = NA)
}
}
# install.packages("statgenHTP")
# install.packages("rstudioapi")
# loading library
library("rstudioapi")
library("statgenHTP")
#set current directory as working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
#loading prepossessed data:
platformdata <- read.csv("../data/image_DHline_data_after_average_based_on_day.csv",row.names = 1,header= TRUE)
# plotId: unique ID of the plant
# multiple value in some day, need to take mean instead of using the raw data at each timepoint
phenoTP <- createTimePoints(dat = platformdata,
experimentName = "DHline11",
genotype = "genotype_name",
timePoint = "Day",
repId = "Rep",
plotId = "XY",
rowNum = "Line", colNum = "Position",
)
attr(phenoTP, 'plotLimObs')
timepoints <- getTimePoints(phenoTP)
summary(phenoTP)
# outline detection
LA_singleOut <- detectSingleOut(TP = phenoTP,
trait = "LA_Estimated",
plotIds = platformdata$XY,
confIntSize = 5,
nnLocfit = 0.5)
Height_singleOut <- detectSingleOut(TP = phenoTP,
trait = "Height_Estimated",
plotIds = platformdata$XY,
confIntSize = 5,
nnLocfit = 0.5)
Biomass_singleOut <- detectSingleOut(TP = phenoTP,
trait = "Biomass_Estimated",
plotIds = platformdata$XY,
confIntSize = 5,
nnLocfit = 0.5)
#PLOT
plot(LA_singleOut, outOnly = FALSE, plotIds = platformdata$XY[1:3])
plot(Height_singleOut, outOnly = FALSE, plotIds = platformdata$XY[1:3])
plot(Biomass_singleOut, outOnly = FALSE, plotIds = platformdata$XY[1:3])
# count outlier
sum(LA_singleOut$outlier)
sum(Height_singleOut$outlier)
sum(Biomass_singleOut$outlier)
# remove single outlier: Height, LA ->outlying point will be replace by NA
phenoTP_remove_out_LA <- removeSingleOut(phenoTP, LA_singleOut)
phenoTP_remove_out_LA_Height <- removeSingleOut(phenoTP_remove_out_LA, Height_singleOut)
phenoTP_remove_out_LA_Height_Biomass <- removeSingleOut(phenoTP_remove_out_LA_Height, Biomass_singleOut)
sum(phenoTP_remove_out_LA_Height_Biomass)
phenoTP_remove_out_LA_Height_Biomass
View(phenoTP_remove_out_LA_Height)
View(Biomass_singleOut)
# fit model after remove single outlier, will cause error while include the last time point
LA_spline_model <- fitModels(TP = phenoTP_remove_out_LA,
trait = "LA_Estimated",
timePoints = 1:44,
what = "fixed",
useRepId = TRUE)
# fit model after remove single outlier, will cause error while include the last time point
LA_spline_model <- fitModels(TP = phenoTP_remove_out_LA_Height_Biomass,
trait = "LA_Estimated",
timePoints = 1:44,
what = "fixed",
useRepId = TRUE)
Height_spline_model <- fitModels(TP = phenoTP_remove_out_LA_Height_Biomass,
trait = "Height_Estimated",
timePoints = 1:44,
what = "fixed",
useRepId = TRUE)
Biomass_spline_model <- fitModels(TP = phenoTP_remove_out_LA_Height_Biomass,
trait = "Biomass_Estimated",
timePoints = 1:44,
what = "fixed",
useRepId = TRUE)
Biomass_spline_model <- fitModels(TP = phenoTP_remove_out_LA_Height_Biomass,
trait = "Biomass_Estimated",
timePoints = 1:45,
what = "fixed",
useRepId = TRUE)
View(Biomass_singleOut)
View(phenoTP_remove_out_LA_Height_Biomass)
View(phenoTP_remove_out_LA)
View(phenoTP_remove_out_LA_Height)
View(phenoTP_remove_out_LA_Height_Biomass)
View(phenoTP_remove_out_LA_Height)
summary(LA_spline_model)
plot(LA_spline_model,
timePoints = 45,
plotType = "spatial",
spaTrend = "raw")
plot(LA_spline_model,
timePoints = 44,
plotType = "spatial",
spaTrend = "raw")
Biomass_spline_model <- fitModels(TP = phenoTP_remove_out_LA_Height_Biomass,
trait = "Biomass_Estimated",
timePoints = 1:44,
what = "fixed",
useRepId = TRUE)
View(phenoTP)
# outline detection
LA_singleOut <- detectSingleOut(TP = phenoTP,
trait = "LA_Estimated_log_transformed",
plotIds = platformdata$XY,
confIntSize = 5,
nnLocfit = 0.5)
Height_singleOut <- detectSingleOut(TP = phenoTP,
trait = "Height_Estimated_log_transformed",
plotIds = platformdata$XY,
confIntSize = 5,
nnLocfit = 0.5)
Biomass_singleOut <- detectSingleOut(TP = phenoTP,
trait = "Biomass_Estimated_log_transformed",
plotIds = platformdata$XY,
confIntSize = 5,
nnLocfit = 0.5)
#PLOT
plot(LA_singleOut, outOnly = FALSE, plotIds = platformdata$XY[1:3])
plot(Height_singleOut, outOnly = FALSE, plotIds = platformdata$XY[1:3])
plot(Biomass_singleOut, outOnly = FALSE, plotIds = platformdata$XY[1:3])
# count outlier: around 10%
sum(LA_singleOut$outlier)
sum(Height_singleOut$outlier)
sum(Biomass_singleOut$outlier)
# outline detection
LA_singleOut <- detectSingleOut(TP = phenoTP,
trait = "LA_Estimated",
plotIds = platformdata$XY,
confIntSize = 5,
nnLocfit = 0.5)
Height_singleOut <- detectSingleOut(TP = phenoTP,
trait = "Height_Estimated",
plotIds = platformdata$XY,
confIntSize = 5,
nnLocfit = 0.5)
Biomass_singleOut <- detectSingleOut(TP = phenoTP,
trait = "Biomass_Estimated",
plotIds = platformdata$XY,
confIntSize = 5,
nnLocfit = 0.5)
# count outlier: around 10%
sum(LA_singleOut$outlier)
sum(Height_singleOut$outlier)
sum(Biomass_singleOut$outlier)
#loading prepossessed data:
image_lines <- read.csv("../data/image_DHline_data_after_average_based_on_day.csv",row.names = 1,header= TRUE)
image_lines$LA_Estimated <- log(image_lines$LA_Estimated)
image_lines$Height_Estimated <- log(image_lines$Height_Estimated)
# Some plants had a height of 0, which became -Inf after the log transform. Setting those to NA:
image_lines$Height_Estimated[which(image_lines$Height_Estimated == -Inf)] <- NA
imageTP.lines <- createTimePoints(dat = image_lines_aggr,
experimentName = "imageLines",
genotype = "genotype_name",
timePoint = "Day",
repId = "Rep",
plotId = "XY",
rowNum = "Line", colNum = "Position")
imageTP.lines <- createTimePoints(dat = image_lines,
experimentName = "imageLines",
genotype = "genotype_name",
timePoint = "Day",
repId = "Rep",
plotId = "XY",
rowNum = "Line", colNum = "Position")
LA.singleOut.lines <- detectSingleOut(TP = imageTP.lines,
trait = "LA_Estimated",
plotIds = unique(image_lines$XY),
confIntSize = 5,
nnLocfit = 0.5)
# Some plants had a height of 0, which became -Inf after the log transform. Setting those to NA:
image_lines$Height_Estimated[which(image_lines$Height_Estimated == -Inf)] <- NA
imageTP.lines <- createTimePoints(dat = image_lines,
experimentName = "imageLines",
genotype = "genotype_name",
timePoint = "Day",
repId = "Rep",
plotId = "XY",
rowNum = "Line", colNum = "Position")
LA.singleOut.lines <- detectSingleOut(TP = imageTP.lines,
trait = "LA_Estimated",
plotIds = unique(image_lines$XY),
confIntSize = 5,
nnLocfit = 0.5)
Height.singleOut.lines <- detectSingleOut(TP = imageTP.lines,
trait = "Height_Estimated",
plotIds = unique(image_lines$XY),
confIntSize = 5,
nnLocfit = 0.5)
sum(Height.singleOut.lines$outlier)
plot(Height.singleOut.lines, outOnly = FALSE, plotIds = platformdata$XY[1:3])
plot(Height_singleOut, outOnly = FALSE, plotIds = platformdata$XY[1:3])
plot(Biomass_singleOut, outOnly = FALSE, plotIds = platformdata$XY[1:3])
plot(Height_singleOut, outOnly = FALSE, plotIds = platformdata$XY[1:3])
View(LA_singleOut)
#loading prepossessed data:
platformdata <- read.csv("../data/image_DHline_data_after_average_based_on_day.csv",row.names = 1,header= TRUE)
# plotId: unique ID of the plant
# multiple value in some day, need to take mean instead of using the raw data at each timepoint
# which is alredy done
phenoTP <- createTimePoints(dat = platformdata,
experimentName = "DHline11",
genotype = "genotype_name",
timePoint = "Day",
repId = "Rep",
plotId = "XY",
rowNum = "Line", colNum = "Position",
)
attr(phenoTP, 'plotLimObs')
timepoints <- getTimePoints(phenoTP)
summary(phenoTP)
# outline detection
LA_singleOut <- detectSingleOut(TP = phenoTP,
trait = "LA_Estimated",
plotIds = platformdata$XY,
confIntSize = 5,
nnLocfit = 0.5)
Height_singleOut <- detectSingleOut(TP = phenoTP,
trait = "Height_Estimated",
plotIds = platformdata$XY,
confIntSize = 5,
nnLocfit = 0.5)
Biomass_singleOut <- detectSingleOut(TP = phenoTP,
trait = "Biomass_Estimated",
plotIds = platformdata$XY,
confIntSize = 5,
nnLocfit = 0.5)
#PLOT
plot(LA_singleOut, outOnly = FALSE, plotIds = platformdata$XY[1:3])
plot(Height_singleOut, outOnly = FALSE, plotIds = platformdata$XY[1:3])
plot(Biomass_singleOut, outOnly = FALSE, plotIds = platformdata$XY[1:3])
# count outlier: around 10% different from killian got, because i did not set
sum(LA_singleOut$outlier)
sum(Height_singleOut$outlier)
sum(Biomass_singleOut$outlier)
# remove single outlier: Height, LA ->outlying point will be replace by NA
phenoTP_remove_out_LA <- removeSingleOut(phenoTP, LA_singleOut)
phenoTP_remove_out_LA_Height <- removeSingleOut(phenoTP_remove_out_LA, Height_singleOut)
phenoTP_remove_out_LA_Height_Biomass <- removeSingleOut(phenoTP_remove_out_LA_Height, Biomass_singleOut)
# fit model after remove single outlier, will cause error while include the last time point
LA_spline_model <- fitModels(TP = phenoTP_remove_out_LA_Height_Biomass,
trait = "LA_Estimated",
timePoints = 1:44,
what = "fixed",
useRepId = TRUE)
Height_spline_model <- fitModels(TP = phenoTP_remove_out_LA_Height_Biomass,
trait = "Height_Estimated",
timePoints = 1:44,
what = "fixed",
useRepId = TRUE)
Biomass_spline_model <- fitModels(TP = phenoTP_remove_out_LA_Height_Biomass,
trait = "Biomass_Estimated",
timePoints = 1:44,
what = "fixed",
useRepId = TRUE)
plot(LA_spline_model,
timePoints = 44,
plotType = "spatial",
spaTrend = "raw")
plot(Height_spline_model,
timePoints = 44,
plotType = "spatial",
spaTrend = "raw")
# Extracting the spatially corrected data which will use to fit the Spline
corrected_LA_spline <- getCorrected(LA_spline_model)
corrected_Height_spline <- getCorrected(Height_spline_model)
# Fitting splines:
LA_spline_lines <- fitSpline(inDat = corrected_LA_spline,
trait = "LA_Estimated_corr",
genotypes = unique(as.character(corrected_LA_spline$genotype)),
knots = 50,
minNoTP = 10)
Height_spline_lines <- fitSpline(inDat = corrected_Height_spline,
trait = "Height_Estimated_corr",
genotypes = unique(as.character(corrected_Height_spline$genotype)),
knots = 50,
minNoTP = 10)
plot(LA_spline_lines,genotypes = "DH_KE0004" )
# Fitting splines:
LA_spline_lines <- fitSpline(inDat = corrected_LA_spline,
trait = "LA_Estimated_corr",
genotypes = unique(as.character(corrected_LA_spline$genotype)),
knots = 30,
minNoTP = 10)
plot(LA_spline_lines,genotypes = "DH_KE0004" )
# Fitting splines:
LA_spline_lines <- fitSpline(inDat = corrected_LA_spline,
trait = "LA_Estimated_corr",
genotypes = unique(as.character(corrected_LA_spline$genotype)),
knots = 20,
minNoTP = 10)
plot(LA_spline_lines,genotypes = "DH_KE0004" )
plot(LA_spline_lines,genotypes = "DH_KE0006" )
plot(Height_spline_lines,genotypes = "DH_KE0006" )
Height_spline_lines <- fitSpline(inDat = corrected_Height_spline,
trait = "Height_Estimated_corr",
genotypes = unique(as.character(corrected_Height_spline$genotype)),
knots = 30,
minNoTP = 10)
plot(Height_spline_lines,genotypes = "DH_KE0006" )
# Fitting splines: knot larger-> more smooth,
LA_spline_lines <- fitSpline(inDat = corrected_LA_spline,
trait = "LA_Estimated_corr",
genotypes = unique(as.character(corrected_LA_spline$genotype)),
knots = 30,
minNoTP = 10)
Height_spline_lines <- fitSpline(inDat = corrected_Height_spline,
trait = "Height_Estimated_corr",
genotypes = unique(as.character(corrected_Height_spline$genotype)),
knots = 30,
minNoTP = 10)
plot(LA_spline_lines,genotypes = "DH_KE0006" )
plot(Height_spline_lines,genotypes = "DH_KE0006" )
# Fitting splines: knot larger-> more smooth,
LA_spline_lines <- fitSpline(inDat = corrected_LA_spline,
trait = "LA_Estimated_corr",
genotypes = unique(as.character(corrected_LA_spline$genotype)),
knots = 20,
minNoTP = 10)
Height_spline_lines <- fitSpline(inDat = corrected_Height_spline,
trait = "Height_Estimated_corr",
genotypes = unique(as.character(corrected_Height_spline$genotype)),
knots = 20,
minNoTP = 10)
corrected_LA_spline$genotype
as.character(corrected_LA_spline$genotype)
# Extracting the predicted values and coefficients for outlier detection
LA_predDat <- LA_spline_lines$predDat
LA_coefDat <- LA_spline_lines$coefDat
Height_predDat <- Height_spline_lines$predDat
Height_coefDat <- Height_spline_lines$coefDat
LA_serieOut <- detectSerieOut(corrDat = corrected_LA_spline,
predDat = LA_predDat,
coefDat = LA_coefDat,
trait = "LA_Estimated_corr",
genotypes = unique(as.character(corrected_LA_spline$genotype)),
thrCor = 0.60,
thrPca = 90,
thrSlope = 0.60)
install.packages(tidyr)
install.packages('tidyr')
install.packages("tidyr")
LA_serieOut <- detectSerieOut(corrDat = corrected_LA_spline,
predDat = LA_predDat,
coefDat = LA_coefDat,
trait = "LA_Estimated_corr",
genotypes = unique(as.character(corrected_LA_spline$genotype)),
thrCor = 0.60,
thrPca = 90,
thrSlope = 0.60)
View(platformdata)
load("E:/Download/minor_thesis/elope-main/ELOPE_raw_data/data_platform/platform_image_filtered.RData")
View(image_lines)
